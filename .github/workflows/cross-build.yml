name: Cross-Platform Builds

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y gcc g++ cmake make

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Configure and Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "macOS" ]; then
            export CFLAGS="-Wno-pointer-sign -Wno-implicit-function-declaration"
            export CXXFLAGS="-Wno-pointer-sign -Wno-implicit-function-declaration"
          fi
          cmake -B build -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build build --config Release

      - name: Configure and Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cmake -B build -DBUILD_SHARED_LIBS=ON
          cmake --build build --config Release

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: build/*

  build-windows-mingw:
    runs-on: windows-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install MinGW
        run: choco install mingw --force

      - name: Configure and Build with MinGW
        run: |
          cmake -G "MinGW Makefiles" -B build-mingw -DBUILD_SHARED_LIBS=ON
          cmake --build build-mingw --config Release

      - name: Upload Windows MinGW Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-mingw-binaries
          path: |
            build-mingw/libdl_c_iso8583.dll
            build-mingw/libdl_c_common.dll

  release:
    needs: [build, build-windows-mingw]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for complete git history

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Version Number
        id: version
        shell: bash
        run: |
          BASE_VERSION="0.0.4"
          BUILD_NUMBER=$(git rev-list --count HEAD)
          echo "VERSION=${BASE_VERSION}-build.${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Generate Changelog
        id: changelog
        shell: bash
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:'- %s')
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:'- %s')
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/binaries-ubuntu-latest/libdl_c_iso8583.so
            artifacts/binaries-ubuntu-latest/libdl_c_common.so
            artifacts/binaries-macos-latest/libdl_c_iso8583.dylib
            artifacts/binaries-macos-latest/libdl_c_common.dylib
            artifacts/binaries-windows-latest/Release/dl_c_iso8583.dll
            artifacts/binaries-windows-latest/Release/dl_c_common.dll
            artifacts/windows-mingw-binaries/libdl_c_iso8583.dll
            artifacts/windows-mingw-binaries/libdl_c_common.dll
          draft: true
          tag_name: ${{ github.ref }}
          name: "Release ${{ env.VERSION }}"
          fail_on_unmatched_files: true
          body: |
            ## Release ${{ env.VERSION }}

            ### Changelog
            ${{ env.CHANGELOG }}

            ### Artifacts
            - **Linux:**
              - `libdl_c_iso8583.so`
              - `libdl_c_common.so`
            - **macOS:**
              - `libdl_c_iso8583.dylib`
              - `libdl_c_common.dylib`
            - **Windows (MSVC):**
              - `dl_c_iso8583.dll`
              - `dl_c_common.dll`
            - **Windows (MinGW):**
              - `libdl_c_iso8583.dll`
              - `libdl_c_common.dll`
